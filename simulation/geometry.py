# -*- coding: utf-8 -*-
"""
Created on Sun May 24 16:01:29 2020

@author: Jacob
"""

import numpy as np
import matplotlib.pyplot as plt

class Tweezers:
    def __init__(self, n_sites, spacing, angle):
        """
        Initialize Tweezer class.

        Parameters
        ----------
        n_sites : tuple
            Specifices number of sites generated by x and y AODs.
        spacing : tuple
            Space between sites generated by each AOM in um.
        angle : float
            Angle between x and y AODs in radians.
            
        Returns
        -------
        None.

        """
        self.n_sites = n_sites
        self.spacing = spacing
        self.angle = angle
        
        self.generate_sites()
    
    def get_position(self, i, j):
        """
        Calculates position of site (i,j).

        Parameters
        ----------
        i : int or np.array of ints
            x indices.
        j : int or np.array of ints
            y indices.


        Returns
        -------
        x : float or np.array of floats
            x position of atom(s) in um.
        y : float or np.array of floats
            y position of atom(s) in um.

        """
        if np.shape(i) != np.shape(j):
            raise Exception('i and j must be the same shape')
        
        x = i*self.spacing[0] + j*self.spacing[1]*np.sin(self.angle)
        y = j*self.spacing[1]*np.cos(self.angle)
        
        return x, y
    
    def generate_sites(self): 
        """
        Generate and store lists of indices and physical positions of each tweezer.
        """
        ni, nj = self.n_sites
        ivec = np.arange(ni)
        jvec = np.arange(nj)
        iarr, jarr = np.meshgrid(ivec, jvec)
        xarr, yarr = self.get_position(iarr,jarr)
        
        self.indices = np.stack([iarr.flatten(), jarr.flatten()])
        self.positions = np.stack([xarr.flatten(), yarr.flatten()])
        
    def plot_sites(self):
        """
        Visualize the tweezers.
        """
        fig, ax = plt.subplots(figsize=(10,10))
        r = self.positions
        x = r[0, :]
        y = r[1, :]
        plt.scatter(x, y)
        plt.xlabel('x (um)')
        plt.ylabel('y (um)')
        ax.set_aspect('equal')
        plt.title('Tweezer positions')
        
        
if __name__ == '__main__':
    tweezer_options = {
        'n_sites': (15,10),
        'spacing': (5,5),
        'angle': np.pi/6,
        }
    
    T = Tweezers(**tweezer_options)
    T.plot_sites()